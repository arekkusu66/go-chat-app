package routes

import (
    "gochat/models"
    "fmt"
	"gochat/types"
)


templ home(user models.User) {
    <!DOCTYPE html>

    <title>chatrooms</title>

    <script src="/script/scripts.js" defer></script>

    if user.ID == "" {
        
        <h1>You are not logged in so you cannot access the chatrooms!</h1>
        <h3>Go to <a href="/signup">signup page</a> to make an account or to log in</h3>

    } else {

        if !user.Verified {
            <h2>Your account is not verified yet, you may want to verify it <a href={templ.URL("/email/verification/send")}>here</a></h2>
        }


        @user_notifications(user)

        <h1>
            Welcome {user.Username}
        </h1>

        <input placeholder="chat room title" id="chatroom-title" />
        <button onclick="sendDatas()">create a chatroom</button>

        @user_chats(user.CreatedChats, "your chatrooms", "you havent created any chat", true)
        @user_chats(user.JoinedChats, "joined chatrooms", "you havent joined any chat", false)
        @user_chats(user.AvailableChats(), "available chatrooms", "there are no chatrooms yet, but you can create one!", false)
    }
}


templ chat(chatDatas models.ChatDatas) {
    <!DOCTYPE html>

    <title>{chatDatas.ChatRoom.Title}</title>
    
    <script src="/script/msgclient.js" defer></script>
    <script src="/script/htmx.js" defer></script>
    <script src="/script/scripts.js" defer></script>


    @user_notifications(chatDatas.User)


    <div>
        <p>joined users:</p>
        <p style="color:green">
            for _, user := range chatDatas.ChatRoom.JoinedUsers {
                <i>{user.Username + ",  "}</i>
            }
        </p>
    </div>

    if chatDatas.AlreadyJoined {
        @already_joined(chatDatas)
    } else {
        @not_joined(chatDatas)
    }

    <div id="messages">
        for _, message := range chatDatas.ChatRoom.Messages {
            @message_user(message, chatDatas.User, true)
        }
    </div>
}


templ dmchat(dm models.DM, user models.User) {
    <!DOCTYPE html>

    <script src="/script/dmclient.js" defer></script>
    <script src="/script/htmx.js" defer></script>
    <script src="/script/scripts.js" defer></script>


    if !user.Verified {
        <h2>Your account is not verified yet, you may want to verify it <a href={templ.URL("/email/verification/send")}>here</a></h2>
    }


    @user_notifications(user)


    if user.CheckUserRelations(user, dm.Users) {
        @dm_accepted()
    } else {
        @dm_not_accepted(dm)
    }


    <div id="messages">
        for _, message := range dm.Messages {
            @message_user(message, user, false)
        }
    </div>
}


templ dmchatrooms(user models.User) {
    <!DOCTYPE html>


    @user_notifications(user)


    if !user.Verified {
        <h2>Your account is not verified yet, you may want to verify it <a href={templ.URL("/email/verification/send")}>here</a></h2>
    }


    <div id="dms">

        if len(user.DMS) == 0 {
            <h3>You have no dms yet</h3>

        } else {
            for _, dm := range user.DMS {

                <div>

                    if !user.CheckUserRelations(user, dm.IgnoredBy) {
                        <a href={templ.URL(fmt.Sprintf("/dm/%d", dm.ID))}>{user.GetTheOtherUser(dm).Username}</a>
                    
                        if dm.LastMessage().ID != 0 {
                            if dm.LastMessage().User.ID == user.ID {
                                <p>{fmt.Sprintf("you: %s" , dm.LastMessage().Text)}</p>
                            } else {
                                <p>{fmt.Sprintf("%s: %s", dm.LastMessage().User.Username, dm.LastMessage().Text)}</p>
                            }
                        }
                    }
                    
                </div>
            }
        }

    </div>


    <div id="dm-requests">

        if len(user.DMRequests) == 0 {
            <h3>You have no dm requests</h3>

        } else {
            <p>Received requests:</p>
            for _, dmReq := range user.DMRequests {

                <div>
                    <a href={templ.URL(fmt.Sprintf("/dm/%d", dmReq.ID))}>{user.GetTheOtherUser(dmReq).Username}</a>
                </div>
            }
        }

    </div>


    <div id="dm-ignored">

        if len(user.IgnoredDMS) != 0 {
            <p>Ignored requests:</p>

            for _, dmIgnored := range user.IgnoredDMS {

                <div>
                    <a href={templ.URL(fmt.Sprintf("/dm/%d", dmIgnored.ID))}>{user.GetTheOtherUser(dmIgnored).Username}</a>
                </div>

            }
        }

    </div>
}


templ userpage(user, currentUser models.User) {
    <!DOCTYPE html>

    <script src="/script/htmx.js" defer></script>
    <script src="/script/scripts.js" defer></script>


    if user.ID == currentUser.ID {
        @yourpage(currentUser)
    } else {
        @not_yourpage(user, currentUser)
    }
}


templ log(logged bool, logtype string) {
    <!DOCTYPE html>
    
    <script src="/script/htmx.js" defer></script>

    if logged {
        <h1>you are already logged in! you can go to <a href="/">chats</a></h1>
        <button hx-post="/logoff">log off</button>

    } else {
        if logtype == "signup" {

            <div id="signup">
                <form method="POST" action="/signup" accept-charset="utf-8">
                    <input type="text" name="username" />
                    <input type="password" name="password" />
                    <input type="password" id="confirm_password" />
                    <input type="text" name="email" />
                    <button type="submit" value="submit">create account</button>
                </form>
            </div>

            <h3>Or signup up with <a href="/oauth/signup">Google</a></h3>

        } else if logtype == "login" {

            <div id="login">
                <form method="POST" action="/login" accept-charset="utf-8">
                    <input type="text" name="username" />
                    <input type="password" name="password" />
                    <button type="submit" value="submit">log in</button>
                </form>
            </div>
        }
    }
}


templ email_verification_send(user models.User) {
    <!DOCTYPE html>

    <script src="/script/htmx.js" defer></script>

    if user.Verified {
        <h2>You are already verified!</h2>
    } else {
        <h2>Click here to send a verification link to your email</h2>

        <button hx-post="/email/verification/send" hx-swap="innerHTML" hx-target="#status">Send the link again</button>

        <button hx-post="/email/verification/send?send-new=true" hx-swap="innerHTML" hx-target="#status">Send a new link</button>

        <h2 id="status"></h2>
    }
}


templ password_reset_send() {
    <!DOCTYPE html>

    <script src="/script/htmx.js" defer></script>

    <button hx-post="/password/reset" hx-swap="innerHTML" hx-target="#status">Send password reset link to your email</button>

    <h2 id="status"></h2>
}


templ password_forgot(user models.User) {
    <!DOCTYPE html>

    if user.PasswordVerification != nil {

        <form method="POST" action={templ.URL(fmt.Sprintf("/password/new?token=%s", user.PasswordVerification.Token))} accept-charset="utf-8">
            <input type="password" name="password" />
            <input type="password" id="confirm_password" />
            <button type="submit" value="submit">change password</button>
        </form>

    } else {
        <h2>You didnt send a request to reset your password</h2>
    }
}


templ oauth_creds() {
    <script src="/script/scripts.js" defer></script>

    <input type="text" id="new-username" placeholder="your username" />
    <button onclick="changeUsername()">Submit</button>
}


templ user_settings(user models.User) {
    <p>{fmt.Sprint(user.Settings.AcceptsFriendReqs)}</p>


    <form method="POST" action="/settings" accept-charset="utf-8">
        <fieldset>
            <legend>Socials</legend>

            @settings(
                "Accept friend requests from anyone?",
                "friend-reqs-yes",
                "friend-reqs-no",
                types.ACCEPT_FRIEND_REQ,
                user.Settings.AcceptsFriendReqs,
            )


            @settings(
                "Accept dm requests from anyone?",
                "dm-reqs-yes",
                "dm-reqs-no",
                types.DM_REQ,
                user.Settings.AcceptsDMReqs,
            )

        </fieldset>

        <button type="submit">Save settings</button>
    </form>
}